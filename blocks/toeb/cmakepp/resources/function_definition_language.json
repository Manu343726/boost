{
  "name":"fdl",
  "phases":[
    {
      "name":"parse",
      "function":"parse_string(/1 /2 /3 /4 /5)",
      "input":["input_ref", "def" ,"definitions","parsers","global"],
      "output":["output"]
    },
    {
      "name":"create input ref",
      "function":"ref_setnew(/1)",
      "input":["input"],
      "output":["input_ref"]
    }
  ],
  "parsers":{
    "regex":"parse_regex",
    "match":"parse_match",
    "sequence":"parse_sequence",
    "any":"parse_any",
    "many":"parse_many",
    "object":"parse_object"
  },
  "definitions":{
    "signature":{
      "parser":"sequence",
      "sequence":{
        "name":"identifier",
        "arguments":"?arguments",
        "colon1":"?/colon",
        "type":"?type",
         "multiplicity":"multiplicity|@1",
        "hash":"?/hash",
        "description":"?description"
      }
    },
    "arguments":{
      "parser":"many",
      "begin":"paren_open",
      "end":"paren_close",
      "element":"argument"
    },
    "argument":{
      "parser":"any",
      "any":[
        "required_argument",
        "optional_argument"
      ]
    },
    "required_argument":{
      "parser":"sequence",
      "sequence":{
        "abo":"/angular_bracket_open",
        "required":"@true",
        "name":"identifier",
        "colon1":"?/colon",
        "type":"?type",
         "multiplicity":"multiplicity|@1",
        "description":"?description",
        "abc":"/angular_bracket_close"
      }
    },
    "optional_argument":{
      "parser":"sequence",
      "sequence":{
        "abo":"/bracket_open",
        "name":"identifier",
        "colon1":"?/colon",
        "type":"?type",
         "multiplicity":"multiplicity|@1",
        "description":"?description",
        "abc":"/bracket_close"
      }
    },
    "type":{
      "parser":"any",
      "any":[
        "identifier"
       
      ]
    },
    "multiplicity":{
      "parser":"any",
      "any":[
        "plus",
        "asterisk"
      ]
    },

    "description":{
      "parser":"regex",
      "regex":"'([^']*)'",
      "ignore_regex":"[ \n\r\t]+",
      "replace":"\\\\1"
      },
    "colon":{
      "parser":"match",
      "search":":",
      "ignore_regex":"[ \n\r\t]+"
    },
    "identifier":{
      "parser":"regex",
      "regex":"[a-zA-Z0-9_-]+",
      "ignore_regex":"[ \n\r\t]+"
    },
    "bracket_open":{
      "parser":"match",
      "search":"[",
      "ignore_regex":"[ \n\r\t]+"
    },
    "bracket_close":{
      "parser":"match",
      "search":"]",
      "ignore_regex":"[ \n\r\t]+"
    },
    "paren_open":{
      "parser":"match",
      "search":"(",
      "ignore_regex":"[ \n\r\t]+"
    },
    "paren_close":{
      "parser":"match",
      "search":")",
      "ignore_regex":"[ \n\r\t]+"
    },
    "brace_open":{
      "parser":"match",
      "search":"{",
      "ignore_regex":"[ \n\r\t]+"
    },
    "brace_close":{
      "parser":"match",
      "search":"}",
      "ignore_regex":"[ \n\r\t]+"
    },
    "angular_bracket_open":{
      "parser":"match",
      "search":"<",
      "ignore_regex":"[ \n\r\t]+"
    },
    "angular_bracket_close":{
      "parser":"match",
      "search":">"  ,
      "ignore_regex":"[ \n\r\t]+"
    },
    "hash":{
      "parser":"match",
      "search":"#"  ,
      "ignore_regex":"[ \n\r\t]+"
    },
    "asterisk":{
      "parser":"match",
      "search":"*"  ,
      "ignore_regex":"[ \n\r\t]+"
    },
    "plus":{
      "parser":"match",
      "search":"+"  ,
      "ignore_regex":"[ \n\r\t]+"
    }
  }
}